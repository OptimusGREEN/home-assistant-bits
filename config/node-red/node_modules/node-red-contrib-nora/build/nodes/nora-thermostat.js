"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var nora_1 = require("../nora");
module.exports = function (RED) {
    RED.nodes.registerType('nora-thermostat', function (config) {
        var _this = this;
        RED.nodes.createNode(this, config);
        var noraConfig = RED.nodes.getNode(config.nora);
        if (!noraConfig || !noraConfig.token) {
            return;
        }
        var close$ = new rxjs_1.Subject();
        var state$ = new rxjs_1.BehaviorSubject({
            online: true,
            thermostatMode: 'off',
            thermostatTemperatureAmbient: 25,
            thermostatTemperatureSetpoint: 20,
            thermostatTemperatureSetpointLow: 20,
            thermostatTemperatureSetpointHigh: 30,
        });
        var stateString$ = new rxjs_1.Subject();
        var availableModes = config.modes.split(',');
        var device$ = nora_1.NoraService
            .getService(RED)
            .getConnection(noraConfig, this, stateString$)
            .pipe(operators_1.switchMap(function (connection) { return connection.addDevice(config.id, {
            type: 'thermostat',
            name: config.devicename,
            roomHint: config.roomhint || undefined,
            availableModes: availableModes,
            temperatureUnit: config.unit,
            state: state$.value,
        }); }), operators_1.publishReplay(1), operators_1.refCount(), operators_1.takeUntil(close$));
        device$.pipe(operators_1.switchMap(function (d) { return d.errors$; }), operators_1.takeUntil(close$)).subscribe(function (err) { return _this.warn(err); });
        rxjs_1.combineLatest(device$, state$)
            .pipe(operators_1.tap(function (_a) {
            var _ = _a[0], state = _a[1];
            return notifyState(state);
        }), operators_1.skip(1), operators_1.takeUntil(close$))
            .subscribe(function (_a) {
            var device = _a[0], state = _a[1];
            return device.updateState(state);
        });
        device$.pipe(operators_1.switchMap(function (d) { return d.state$; }), operators_1.takeUntil(close$)).subscribe(function (state) {
            notifyState(state);
            _this.send({
                payload: {
                    mode: state.thermostatMode,
                    setpoint: state.thermostatTemperatureSetpoint,
                    setpointLow: state.thermostatTemperatureSetpointLow,
                    setpointHigh: state.thermostatTemperatureSetpointHigh,
                },
                topic: config.topic,
            });
        });
        this.on('input', function (msg) {
            if (config.passthru) {
                _this.send(msg);
            }
            var payload = msg.payload;
            if (typeof payload !== 'object') {
                return;
            }
            var update = {};
            var mode = payload.mode;
            if (typeof mode === 'string') {
                mode = mode.toLowerCase().trim();
                if (availableModes.indexOf(mode) >= 0) {
                    update.thermostatMode = mode;
                }
            }
            getNumberAndUpdate(payload, 'setpoint', update, 'thermostatTemperatureSetpoint');
            getNumberAndUpdate(payload, 'setpointHigh', update, 'thermostatTemperatureSetpointHigh');
            getNumberAndUpdate(payload, 'setpointLow', update, 'thermostatTemperatureSetpointLow');
            getNumberAndUpdate(payload, 'temperature', update, 'thermostatTemperatureAmbient');
            getNumberAndUpdate(payload, 'humidity', update, 'thermostatHumidityAmbient');
            if (Object.keys(update).length) {
                state$.next(tslib_1.__assign({}, state$.value, update));
            }
        });
        this.on('close', function () {
            close$.next();
            close$.complete();
        });
        function notifyState(state) {
            stateString$.next("(" + state.thermostatMode + "/T:" + state.thermostatTemperatureAmbient + "/S:" + state.thermostatTemperatureSetpoint + ")");
        }
        function getNumberAndUpdate(payload, propName, update, targetPropName) {
            var value = parseFloat(payload[propName]);
            if (!isNaN(value) && isFinite(value)) {
                update[targetPropName] = value;
            }
        }
    });
};
